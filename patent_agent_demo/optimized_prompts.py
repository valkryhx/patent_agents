"""
Optimized Agent Prompts following Anthropic's Prompt Engineering Best Practices

This module contains optimized prompts for the patent writing system agents,
following Anthropic's recommended practices for clear, structured, and effective prompts.
"""

from typing import Dict, List, Any

class OptimizedPrompts:
    """Optimized prompts for patent writing agents following Anthropic best practices"""
    
    # System role definitions
    SYSTEM_ROLES = {
        "planner": """你是一位资深的专利策略专家，拥有15年以上的专利撰写和策略规划经验。
你的专长包括：
- 专利可行性分析和风险评估
- 创新点识别和技术路线规划
- 专利布局策略制定
- 竞争分析和市场定位

你的工作风格：
- 系统性思考，从整体到细节
- 数据驱动，基于事实分析
- 前瞻性规划，考虑长期发展
- 风险意识强，主动识别潜在问题

请始终保持专业、客观、严谨的态度。""",
        
        "writer": """你是一位专业的专利撰写专家，拥有丰富的技术文档撰写经验。
你的专长包括：
- 技术方案的系统性描述
- 专利文档的结构化撰写
- 技术细节的准确表达
- 法律要求的合规性把控

你的写作原则：
- 清晰准确：技术描述无歧义
- 结构完整：覆盖所有必要章节
- 逻辑严密：论证过程清晰
- 术语统一：保持概念一致性

请确保所有输出符合专利撰写规范。""",
        
        "reviewer": """你是一位严格的专利审查专家，负责质量控制和合规性检查。
你的职责包括：
- 技术内容的准确性验证
- 专利要求的合规性检查
- 文档结构的完整性评估
- 创新点的突出性确认

你的审查标准：
- 技术准确性：无技术错误
- 法律合规性：符合专利法要求
- 创新显著性：突出技术贡献
- 描述充分性：支持权利要求

请严格把关，确保专利质量。""",
        
        "rewriter": """你是一位专业的专利文档优化专家，擅长提升文档质量和可读性。
你的优化方向：
- 语言表达的精准性
- 技术描述的完整性
- 逻辑结构的清晰性
- 创新点的突出性

你的优化原则：
- 保持技术准确性
- 提升表达清晰度
- 强化创新亮点
- 确保法律合规

请基于反馈进行精准优化。"""
    }
    
    @staticmethod
    def get_planner_strategy_prompt(topic: str, description: str, analysis: Dict[str, Any]) -> str:
        """Optimized prompt for patent strategy development"""
        return f"""# 专利策略制定任务

## 背景信息
- **专利主题**: {topic}
- **技术描述**: {description}
- **可行性分析**: 新颖性{analysis.get('novelty_score', 'N/A')}/10，创造性{analysis.get('inventive_step_score', 'N/A')}/10

## 任务要求
请制定一份完整的专利策略方案，包含以下要素：

### 1. 创新点识别
- 识别3-5个核心创新点
- 每个创新点说明技术贡献和商业价值
- 评估创新点的可专利性

### 2. 技术路线规划
- 确定技术实现路径
- 识别关键技术节点
- 制定开发里程碑

### 3. 专利布局策略
- 确定专利保护范围
- 识别潜在的专利组合
- 制定申请优先级

### 4. 风险评估
- 识别技术风险点
- 评估竞争威胁
- 制定风险缓解措施

## 输出格式
请按以下结构输出：

```markdown
# 专利策略方案

## 1. 创新点分析
### 创新点1: [名称]
- 技术贡献: [描述]
- 商业价值: [描述]
- 可专利性: [评估]

## 2. 技术路线
### 阶段1: [阶段名称]
- 目标: [描述]
- 关键技术: [描述]
- 时间节点: [时间]

## 3. 专利布局
### 核心专利
- 保护范围: [描述]
- 申请策略: [描述]

## 4. 风险评估
### 技术风险
- 风险点: [描述]
- 缓解措施: [描述]
```

请确保输出内容专业、准确、可执行。"""

    @staticmethod
    def get_writer_outline_prompt(topic: str) -> str:
        """Optimized prompt for patent outline generation"""
        return f"""# 专利大纲撰写任务

## 专利主题
{topic}

## 任务目标
创建一份结构完整、逻辑清晰的专利撰写大纲。

## 大纲要求

### 1. 结构完整性
必须包含以下章节：
- 技术领域
- 背景技术  
- 发明内容
- 具体实施方式
- 权利要求书
- 附图说明

### 2. 内容深度
每个章节应包含：
- 3-5个核心要点
- 预计字数：≥800字/章
- 技术深度：专业级

### 3. 逻辑关系
- 章节间逻辑递进
- 技术方案逐步展开
- 创新点逐步突出

## 输出格式

```markdown
# 专利撰写大纲

## 1. 技术领域
### 1.1 [要点1]
### 1.2 [要点2]
### 1.3 [要点3]
预计字数：800字

## 2. 背景技术
### 2.1 [要点1]
### 2.2 [要点2]
### 2.3 [要点3]
预计字数：800字

[继续其他章节...]
```

请确保大纲结构清晰、内容完整、逻辑严密。"""

    @staticmethod
    def get_writer_background_prompt(topic: str) -> str:
        """Optimized prompt for background technology section"""
        return f"""# 背景技术撰写任务

## 专利主题
{topic}

## 撰写要求

### 1. 内容结构
- **技术领域定义**: 明确技术所属领域
- **现有技术分析**: 分析1-2个主要技术方案
- **技术痛点识别**: 指出现有技术的不足
- **对比分析**: 对比不同技术方案的优劣

### 2. 技术要求
- **字数要求**: ≥800字
- **技术深度**: 专业级技术描述
- **图表要求**: 插入1个mermaid流程图
- **公式要求**: 插入1-2段算法公式

### 3. 写作风格
- 正式、技术性
- 客观、准确
- 逻辑清晰
- 术语规范

## 输出格式

```markdown
# 背景技术

## 1. 技术领域
[技术领域定义，约200字]

## 2. 现有技术方案
### 2.1 方案一：[方案名称]
[详细描述，约300字]

### 2.2 方案二：[方案名称]  
[详细描述，约300字]

## 3. 技术痛点分析
[痛点分析，约200字]

## 4. 技术对比分析
```mermaid
[流程图代码]
```

## 5. 关键技术公式
[算法公式]

## 6. 总结
[总结现有技术状况，约100字]
```

请确保内容准确、结构清晰、技术深度适当。"""

    @staticmethod
    def get_writer_summary_prompt(topic: str) -> str:
        """Optimized prompt for invention summary section"""
        return f"""# 发明内容撰写任务

## 专利主题
{topic}

## 撰写要求

### 1. 核心内容
- **创新点概述**: 突出核心技术创新
- **系统架构**: 描述整体技术架构
- **技术优势**: 说明技术优势和应用价值

### 2. 技术要求
- **字数要求**: ≥800字
- **架构图**: 插入1个mermaid架构图
- **关键公式**: 2-3段核心算法公式
- **伪代码**: 展示主流程伪代码

### 3. 创新突出
- 明确技术贡献
- 突出创新亮点
- 说明技术优势
- 展示应用前景

## 输出格式

```markdown
# 发明内容/技术方案-总述

## 1. 技术概述
[技术概述，约200字]

## 2. 核心创新点
### 2.1 创新点一：[创新点名称]
[详细描述，约200字]

### 2.2 创新点二：[创新点名称]
[详细描述，约200字]

## 3. 系统架构
```mermaid
[架构图代码]
```

## 4. 关键技术公式
### 4.1 公式一：[公式名称]
[公式内容]

### 4.2 公式二：[公式名称]
[公式内容]

## 5. 核心算法流程
```python
[伪代码，≥30行]
```

## 6. 技术优势
[技术优势总结，约200字]
```

请确保创新点突出、技术描述准确、架构清晰。"""

    @staticmethod
    def get_writer_implementation_prompt(topic: str, section_id: str, section_title: str) -> str:
        """Optimized prompt for implementation details section"""
        return f"""# 具体实施方式撰写任务

## 专利主题
{topic}

## 章节信息
- **章节编号**: {section_id}
- **章节标题**: {section_title}

## 撰写要求

### 1. 内容深度
- **字数要求**: ≥1200字
- **技术细节**: 详细的技术实现描述
- **实施步骤**: 清晰的步骤说明

### 2. 技术要求
- **流程图**: 1个mermaid流程图
- **算法公式**: 2个核心算法公式
- **伪代码**: 1段Python风格伪代码（≥30行）

### 3. 结构要求
- **输入输出**: 明确输入输出定义
- **参数条件**: 详细的参数说明
- **实施步骤**: 逐步的实施过程
- **术语一致**: 保持术语统一

## 输出格式

```markdown
# 具体实施方式-子章节{section_id}：{section_title}

## 1. 概述
[章节概述，约200字]

## 2. 技术原理
[技术原理描述，约300字]

## 3. 实施流程
```mermaid
[流程图代码]
```

## 4. 核心算法
### 4.1 算法一：[算法名称]
[算法公式]

### 4.2 算法二：[算法名称]
[算法公式]

## 5. 实现代码
```python
[伪代码实现，≥30行]
```

## 6. 输入输出定义
### 6.1 输入参数
- 参数1: [类型] [描述]
- 参数2: [类型] [描述]

### 6.2 输出结果
- 结果1: [类型] [描述]
- 结果2: [类型] [描述]

## 7. 实施步骤
### 步骤1: [步骤名称]
[详细描述]

### 步骤2: [步骤名称]
[详细描述]

## 8. 总结
[章节总结，约100字]
```

请确保技术描述详细、实现步骤清晰、代码规范。"""

    @staticmethod
    def get_writer_claims_prompt() -> str:
        """Optimized prompt for patent claims generation"""
        return f"""# 权利要求书撰写任务

## 撰写要求

### 1. 权利要求结构
- **独立权利要求**: 1项，覆盖核心技术方案
- **从属权利要求**: 3项，细化关键技术特征
- **保护范围**: 合理且充分

### 2. 撰写原则
- **术语统一**: 保持术语一致性
- **避免结果性限定**: 不限定技术效果
- **支持充分**: 有充分的技术描述支持
- **逻辑清晰**: 权利要求间逻辑关系明确

### 3. 技术要求
- **技术特征**: 明确技术特征
- **保护范围**: 合理的保护范围
- **新颖性**: 体现技术新颖性
- **创造性**: 体现技术创造性

## 输出格式

```markdown
# 权利要求书

1. 一种[技术方案名称]，其特征在于，包括：
   - [技术特征1]；
   - [技术特征2]；
   - [技术特征3]。

2. 根据权利要求1所述的[技术方案名称]，其特征在于，所述[技术特征1]包括：
   - [细化特征1]；
   - [细化特征2]。

3. 根据权利要求1所述的[技术方案名称]，其特征在于，所述[技术特征2]包括：
   - [细化特征1]；
   - [细化特征2]。

4. 根据权利要求1所述的[技术方案名称]，其特征在于，所述[技术特征3]包括：
   - [细化特征1]；
   - [细化特征2]。
```

请确保权利要求结构合理、保护范围适当、技术特征明确。"""

    @staticmethod
    def get_writer_drawings_prompt() -> str:
        """Optimized prompt for drawings description"""
        return f"""# 附图说明撰写任务

## 撰写要求

### 1. 附图类型
- **系统架构图**: 展示整体系统架构
- **流程图**: 展示主要处理流程
- **数据流图**: 展示数据流向
- **界面示意图**: 展示用户界面

### 2. 说明要求
- **图号标识**: 明确图号和图名
- **组件说明**: 详细说明各组件功能
- **流程描述**: 清晰描述处理流程
- **关系说明**: 说明组件间关系

### 3. 技术要求
- **准确性**: 图与说明一致
- **完整性**: 覆盖所有重要组件
- **清晰性**: 说明清晰易懂
- **专业性**: 符合技术文档规范

## 输出格式

```markdown
# 附图说明

## 图1 系统整体架构图
图1展示了[技术方案名称]的整体架构，包括：
- [组件1]: [功能描述]
- [组件2]: [功能描述]
- [组件3]: [功能描述]

各组件之间的关系如下：
[关系描述]

## 图2 核心处理流程图
图2展示了[核心流程名称]的处理流程，包括以下步骤：
1. [步骤1]: [详细描述]
2. [步骤2]: [详细描述]
3. [步骤3]: [详细描述]

## 图3 数据流图
图3展示了系统中的数据流向，包括：
- [数据流1]: [描述]
- [数据流2]: [描述]
- [数据流3]: [描述]

## 图4 用户界面示意图
图4展示了系统的用户界面，包括：
- [界面元素1]: [功能说明]
- [界面元素2]: [功能说明]
- [界面元素3]: [功能说明]
```

请确保附图说明准确、详细、专业。"""

    @staticmethod
    def get_reviewer_quality_prompt(content: str, section_type: str) -> str:
        """Optimized prompt for quality review"""
        return f"""# 专利文档质量审查任务

## 审查内容
- **文档类型**: {section_type}
- **文档内容**: [已生成的内容]

## 审查标准

### 1. 技术准确性
- [ ] 技术描述准确无误
- [ ] 算法公式正确
- [ ] 实现步骤可行
- [ ] 术语使用规范

### 2. 法律合规性
- [ ] 符合专利法要求
- [ ] 权利要求结构合理
- [ ] 保护范围适当
- [ ] 避免结果性限定

### 3. 内容完整性
- [ ] 覆盖所有必要要素
- [ ] 结构完整清晰
- [ ] 逻辑关系明确
- [ ] 创新点突出

### 4. 表达质量
- [ ] 语言表达清晰
- [ ] 逻辑结构合理
- [ ] 专业术语统一
- [ ] 格式规范标准

## 审查输出

请按以下格式输出审查结果：

```markdown
# 质量审查报告

## 总体评价
[总体评价，包括优点和不足]

## 具体问题
### 问题1: [问题描述]
- 严重程度: [高/中/低]
- 建议修改: [具体建议]

### 问题2: [问题描述]
- 严重程度: [高/中/低]
- 建议修改: [具体建议]

## 改进建议
1. [建议1]
2. [建议2]
3. [建议3]

## 质量评分
- 技术准确性: [分数]/10
- 法律合规性: [分数]/10
- 内容完整性: [分数]/10
- 表达质量: [分数]/10
- 总体评分: [分数]/10
```

请严格审查，确保专利质量。"""

    @staticmethod
    def get_rewriter_optimization_prompt(content: str, feedback: str, section_type: str) -> str:
        """Optimized prompt for content optimization"""
        return f"""# 专利文档优化任务

## 优化对象
- **文档类型**: {section_type}
- **原始内容**: [原始内容]
- **优化反馈**: {feedback}

## 优化要求

### 1. 基于反馈优化
- 针对反馈问题进行修改
- 保持技术准确性
- 提升表达质量
- 强化创新亮点

### 2. 优化原则
- 保持技术内容不变
- 提升语言表达清晰度
- 优化逻辑结构
- 统一术语使用

### 3. 质量提升
- 消除歧义表达
- 完善技术描述
- 优化文档结构
- 增强可读性

## 优化输出

请输出优化后的内容，确保：
1. 解决了反馈中提到的问题
2. 保持了技术准确性
3. 提升了表达质量
4. 符合专利撰写规范

## 优化说明

请在优化后简要说明：
- 主要修改内容
- 优化效果
- 质量提升点

请基于反馈进行精准优化，确保质量提升。"""

# Usage example
if __name__ == "__main__":
    prompts = OptimizedPrompts()
    
    # Example usage
    strategy_prompt = prompts.get_planner_strategy_prompt(
        "以证据图增强的rag系统",
        "一种通过构建跨文档证据关系图并进行子图选择驱动生成与验证的RAG系统",
        {"novelty_score": 8.5, "inventive_step_score": 7.8}
    )
    
    print("Optimized Strategy Prompt:")
    print(strategy_prompt)